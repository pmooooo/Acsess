services:
  frontend:
    build: ./acsess_frontend
    command: npm start
    volumes:
      - ./acsess_frontend:/app
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true

  db:
      image: postgres
      environment:
        POSTGRES_DB: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
      volumes:
        - postgres_data:/var/lib/postgresql/data/

  backend:
    build: ./acsess_backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./acsess_backend:/project
      - ./acsess_backend/acsess_data/excel:/project/data
    ports:
      - 8000:8000
    depends_on:
      - db
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery:
    build: ./acsess_backend
    command: celery -A acsess_backend worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - backend
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  tests:
    build: ./acsess_backend
    command: python manage.py test acsess_api.tests
    volumes:
      - ./acsess_backend:/project
    depends_on:
      - db
      
  celery-beat:
    build: ./acsess_backend
    command: celery -A acsess_backend beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - backend
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

volumes:
  postgres_data:
  redis-data: